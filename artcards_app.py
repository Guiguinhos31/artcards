import streamlit as st
import pandas as pd
import random
from datetime import datetime
import time

import requests
import pandas as pd
import streamlit as st

# --- V√©rification des images du CSV ---
st.markdown("---")
st.subheader("üñºÔ∏è V√©rifier les images des cartes")

if st.button("V√©rifier les images"):
    try:
        # Lecture du CSV
        df = pd.read_csv("cartes50.csv")

        errors = []
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}

        # V√©rifie chaque lien d'image
        with st.spinner("V√©rification en cours..."):
            for i, row in df.iterrows():
                # Colonne du lien image ‚Äî v√©rifie bien qu‚Äôelle s‚Äôappelle exactement comme √ßa :
                url = row["URL Image"]
                name = row["Nom de l‚Äô≈ìuvre"]

                try:
                    r = requests.get(url, headers=headers, timeout=8, stream=True)
                    if r.status_code != 200:
                        errors.append(f"‚ùå {name} ‚Üí {url} (erreur HTTP {r.status_code})")
                except Exception as e:
                    errors.append(f"‚ö†Ô∏è {name} ‚Üí {url} (erreur : {e})")

        # R√©sultat
        if not errors:
            st.success("‚úÖ Toutes les images de cartes50.csv sont accessibles et fonctionnelles !")
        else:
            st.error(f"{len(errors)} erreur(s) d√©tect√©e(s) :")
            for err in errors:
                st.write(err)

    except FileNotFoundError:
        st.error("‚ö†Ô∏è Fichier cartes50.csv introuvable. V√©rifie son emplacement dans le m√™me dossier que ton script.")
    except Exception as e:
        st.error(f"Erreur inattendue : {e}")


# --- Charger les cartes ---
cards = pd.read_csv("cartes50.csv")  # Assure-toi que URL Image contient les liens Wikipedia

# --- Initialiser session state ---
if "collection" not in st.session_state:
    st.session_state.collection = []
if "last_day" not in st.session_state:
    st.session_state.last_day = datetime.today().date()
if "days_connected" not in st.session_state:
    st.session_state.days_connected = 1

# --- Couleurs selon raret√© ---
rarity_colors = {
    "Commun": "lightgray",
    "Peu commun": "#6495ED",
    "Rare": "#800080",
    "L√©gendaire": "#FFD700"
}

# --- Titre ---
st.markdown("<h1 style='text-align:center; color: darkblue;'>üé® ArtCards - Collection d'art üé®</h1>", unsafe_allow_html=True)

# --- Mise √† jour jours de connexion ---
today = datetime.today().date()
if st.session_state.last_day != today:
    st.session_state.days_connected += 1
    st.session_state.last_day = today

st.markdown(f"<p style='text-align:center;'>Jours de connexion : <b>{st.session_state.days_connected}</b></p>", unsafe_allow_html=True)

# --- Fonction pour ouvrir un pack (simul√©) ---
def open_pack(pack_cards):
    placeholder = st.empty()
    for _, card in pack_cards.iterrows():
        if card["ID"] not in st.session_state.collection:
            st.session_state.collection.append(card["ID"])
        rarity = card["Raret√©"]
        star = "‚ú®" if rarity in ["Rare", "L√©gendaire"] else ""
        color = rarity_colors.get(rarity, "black")
        placeholder.markdown(f"""
        <div style='border:2px solid {color}; padding:10px; text-align:center; margin-bottom:10px;'>
            <img src="{card['URL Image']}" width="200"><br>
            <b style='color:{color}; font-size:18px;'>{star} {card['Nom de l‚Äô≈ìuvre']} ({rarity}) - {card['Artiste']}</b>
        </div>
        """, unsafe_allow_html=True)
        time.sleep(0.7)  # D√©lai pour simuler l‚Äôouverture progressive

# --- Pack myst√®re toutes les 7 connexions ---
if st.session_state.days_connected >= 7 and st.session_state.days_connected % 7 == 0:
    mystery_cards = cards.sample(5)
    st.subheader("üéÅ Pack Myst√®re D√©bloqu√© !")
    open_pack(mystery_cards)

# --- Pack du jour ---
theme_list = cards["P√©riode / Th√®me"].unique()
chosen_theme = st.selectbox("Choisis ton pack du jour :", theme_list)

if st.button("Ouvrir le pack"):
    pack_cards = cards[cards["P√©riode / Th√®me"] == chosen_theme].sample(5)
    st.subheader(f"üì¶ Pack {chosen_theme} ouvert !")
    open_pack(pack_cards)

# --- Albums par th√®me ---
st.subheader("üìö Albums par th√®me")
for theme in theme_list:
    st.write(f"### {theme}")
    theme_cards = cards[cards["P√©riode / Th√®me"] == theme]
    owned = theme_cards[theme_cards["ID"].isin(st.session_state.collection)]
    missing = theme_cards[~theme_cards["ID"].isin(st.session_state.collection)]
    
    st.write(f"Cartes poss√©d√©es : {len(owned)}/{len(theme_cards)}")
    st.progress(len(owned)/len(theme_cards))
    
    cols = st.columns(5)
    for idx, (_, card) in enumerate(owned.iterrows()):
        col = cols[idx % 5]
        star = "‚ú®" if card["Raret√©"] in ["Rare", "L√©gendaire"] else ""
        border = "4px solid gold" if card["Raret√©"] == "L√©gendaire" else "2px solid black"
        col.markdown(f"""
        <div style='border:{border}; padding:5px; text-align:center;'>
            <img src="{card['URL Image']}" width="100"><br>
            {star} {card['Nom de l‚Äô≈ìuvre']} ({card['Raret√©']})
        </div>
        """, unsafe_allow_html=True)
    
    for idx, (_, card) in enumerate(missing.iterrows()):
        col = cols[idx % 5]
        col.image("https://via.placeholder.com/100?text=??", width=100, caption="Carte manquante")






